spring:
    datasource:
        url: jdbc:postgresql://ec2-34-202-127-5.compute-1.amazonaws.com:5432/dfmfc5upmcgn58
        username: dclzzgelxtnsqh
        password: f67fac2597b48a05e6df5879a0084389fa94a73a2afd53799032a73a1ed9cc43
    jpa:
        show-sql: true
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 24230090642-92mrao8024l7dloskor901ps3l7ofmmt.apps.googleusercontent.com
              clientSecret: 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
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect